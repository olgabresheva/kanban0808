{"version":3,"sources":["TaskCreateForm.js","Task.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["TaskCreateForm","props","useState","newTask","setNewTask","priority","setPriority","className","type","value","onChange","e","target","onClick","onTaskCreate","Task","task","title","Board","status","tasks","filter","el","map","key","id","initial","uuidv4","App","setTasks","updatedTasks","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yOAyBeA,MAtBf,SAAwBC,GAAQ,IAAD,EAEGC,mBAAS,IAFZ,mBAEpBC,EAFoB,KAEXC,EAFW,OAGKF,mBAAS,GAHd,mBAGpBG,EAHoB,KAGVC,EAHU,KAU3B,OACI,yBAAKC,UAAU,kBAEX,2BAAOC,KAAK,OAAOC,MAAON,EAASO,SAAU,SAAAC,GAAC,OAAIP,EAAWO,EAAEC,OAAOH,UACtE,2BAAOD,KAAK,SAASC,MAAOJ,EAAUK,SAAU,SAAAC,GAAC,OAAIL,EAAYK,EAAEC,OAAOH,UAC1E,4BAAQI,QAVG,WACfZ,EAAMa,aAAaX,EAASE,GAC5BD,EAAW,MAQP,cCLGW,MAVf,SAAcd,GACV,OACI,0BAAMM,UAAU,QACXN,EAAMe,KAAKC,MADhB,KAEOhB,EAAMe,KAAKX,WCQXa,MAXf,SAAejB,GACX,OACI,0BAAMM,UAAU,UACXN,EAAMkB,OACNlB,EAAMmB,MAAMC,QAAO,SAAAC,GAAE,OAAIA,EAAGH,SAAWlB,EAAMkB,UAAQI,KAAI,SAAAD,GAAE,OAAI,wBAAIE,IAAKF,EAAGG,IACxE,kBAAC,EAAD,CAAMT,KAAMM,U,OCFtBI,G,MAAU,CACZ,CAACD,GAAIE,eAAUV,MAAO,SAAUZ,SAAU,EAAGc,OAAQ,QACrD,CAACM,GAAIE,eAAUV,MAAO,SAAUZ,SAAU,EAAGc,OAAQ,YA8B1CS,MA3Bf,WAAgB,IAAD,EAEe1B,mBAASwB,GAFxB,mBAEJN,EAFI,KAEGS,EAFH,KAWX,OACI,yBAAKtB,UAAU,OAEX,yBAAKA,UAAU,aACX,kBAAC,EAAD,CAAgBO,aAVP,SAACX,EAASE,GAC3B,IAAMyB,EAAY,YAAOV,GACzBU,EAAaC,KAAK,CAACN,GAAIE,eAAUV,MAAOd,EAASE,SAAUA,EAAUc,OAAQ,SAC7EU,EAASC,MASD,6BACA,yBAAKvB,UAAU,OAfZ,CAAC,OAAQ,cAAe,SAAU,QAgBrBgB,KAAI,SAAAD,GAAE,OAAI,kBAAC,EAAD,CAAOH,OAAQG,EAAIF,MAAOA,WCnBhDY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.abe2650f.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nfunction TaskCreateForm(props) {\n\n    const [newTask, setNewTask] = useState('');\n    const [priority, setPriority] = useState(0);\n\n    const taskCreate = () => {\n        props.onTaskCreate(newTask, priority);\n        setNewTask('');\n    }\n\n    return (\n        <div className=\"TaskCreateForm\">\n\n            <input type=\"text\" value={newTask} onChange={e => setNewTask(e.target.value)}/>\n            <input type=\"number\" value={priority} onChange={e => setPriority(e.target.value)}/>\n            <button onClick={taskCreate}>Add Task</button>\n\n\n        </div>\n    );\n}\n\nexport default TaskCreateForm;\n","import React from 'react';\nimport './App.css';\n\nfunction Task(props) {\n    return (\n        <span className=\"Task\">\n            {props.task.title}\n            P:{props.task.priority}\n\n        </span>\n    );\n}\n\nexport default Task;\n","import React from 'react';\nimport './App.css';\nimport Task from \"./Task\";\n\nfunction Board(props) {\n    return (\n        <span className=\"col-sm\">\n            {props.status}\n            {props.tasks.filter(el => el.status === props.status).map(el => <li key={el.id}>\n                <Task task={el}/>\n            </li>)}\n        </span>\n    );\n}\n\nexport default Board;\n","import React, {useState} from 'react';\nimport './App.css';\nimport TaskCreateForm from \"./TaskCreateForm\";\nimport Board from \"./Board\";\nimport {v4 as uuidv4} from 'uuid';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nconst initial = [\n    {id: uuidv4(), title: 'Task-1', priority: 2, status: 'todo'},\n    {id: uuidv4(), title: 'Task-2', priority: 3, status: 'review'},\n]\n\nfunction App() {\n\n    const [tasks, setTasks] = useState(initial);\n    const status = ['todo', 'in progress', 'review', 'done']\n\n    const onTaskCreate = (newTask, priority) => {\n        const updatedTasks = [...tasks];\n        updatedTasks.push({id: uuidv4(), title: newTask, priority: priority, status: 'todo'});\n        setTasks(updatedTasks);\n    }\n\n    return (\n        <div className=\"App\">\n\n            <div className=\"container\">\n                <TaskCreateForm onTaskCreate={onTaskCreate}/>\n\n                <hr/>\n                <div className=\"row\">\n                        {status.map(el => <Board status={el} tasks={tasks}/>)}\n                </div>\n\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}